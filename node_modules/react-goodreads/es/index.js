function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import axios from 'axios';
import xml2json from 'xml2js';
import Layout from './layout';
import { css } from 'glamor';

var pStyle = css({
  color: 'gray',
  border: '1px dashed #ccc',
  fontSize: '.85em',
  letterSpacing: '.1em',
  textTransform: 'uppercase'

});

var _default = function (_Component) {
  _inherits(_default, _Component);

  function _default() {
    var _temp, _this, _ret;

    _classCallCheck(this, _default);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      jsonData: [],
      error: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _default.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var apiKey = this.props.apikey;
    var config = { headers: { "X-Requested-With": "XMLHttpRequest" } };
    axios.get("https://cors-anywhere.herokuapp.com/http://www.goodreads.com/review/list/39704220.xml?key=" + apiKey + "&v=2", config).then(function (response) {
      var data = void 0;
      xml2json.parseString(response.data, function (err, result) {
        data = result.GoodreadsResponse.reviews[0].review;
      });
      _this2.setState({ jsonData: data });
    }).catch(function (error) {
      _this2.setState({ error: error });
    });
  };

  _default.prototype.getRating = function getRating(val) {
    if (val == "1") {
      return '✰';
    } else if (val == "2") {
      return '✰✰';
    } else if (val == "3") {
      return '✰✰✰';
    } else if (val == "4") {
      return '✰✰✰✰';
    } else if (val == "5") {
      return '✰✰✰✰✰';
    } else {
      return 'Not rated yet';
    }
  };

  _default.prototype.getFormattedDate = function getFormattedDate(unformattedDate) {
    return !unformattedDate.isNan ? new Date(unformattedDate).toLocaleString(this.props.locales !== undefined ? this.props.locales : 'en-EN', { timeZone: 'UTC' }) : 'No Date';
  };

  _default.prototype.render = function render() {
    var _this3 = this;

    var layout = this.state.jsonData.map(function (v, k) {
      return React.createElement(Layout, {
        key: k,
        name: v.book[0].title,
        cover: v.book[0].image_url,
        url: v.book[0].link,
        started: _this3.getFormattedDate(v.started_at),
        rating: _this3.getRating(v.rating),
        bookCoverTitle: _this3.props.bookCoverTitle,
        bookNameTitle: _this3.props.bookNameTitle,
        startAtTitle: _this3.props.startAtTitle,
        ratingTitle: _this3.props.ratingTitle });
    });

    return React.createElement(
      'div',
      null,
      React.createElement(
        'p',
        pStyle,
        this.props.caption !== undefined ? this.props.caption : 'My Goodreads Read Shelf'
      ),
      layout
    );
  };

  return _default;
}(Component);

export { _default as default };